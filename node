
// File generated automatically

class Parser {
    constructor() {}
    static stack_push(stack, bracket_idx, bracket_open) {
        if (bracket_open) { stack.push(bracket_idx); return true; }
        if (stack.length === 0) { return false; }
        if (stack[stack.length - 1] !== bracket_idx) { return false; }
        stack.pop();
        return true;
    }
    static parse(str) {
        var state = 15
        var stack = []
        var path = []
        str+="c";
        
        LETTERS: for (let c of str) {
            EDGES: while(true) {
                var stack_top = stack.slice(-1)[0];
                switch (state) {    
        
case 0:
if (c === 'c'  && stack_top === 1) {
state=4;
path.push("S]");
continue EDGES;
} else 
if (c === ')'  && stack_top === 4) {
state=4;
path.push("S]");
continue EDGES;
} else 
if (c === ')'  && stack_top === 1) {
state=4;
path.push("S]");
continue EDGES;
} else 
if (c === 'c'  && stack_top === 5) {
state=4;
path.push("S]");
continue EDGES;
} else 
{ throw new Error(`No way to continue on letter '${c}'`); }
break;
case 1:
if (c === '(' ) {
state=2;
if (!Parser.stack_push(stack, 1, true)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
if (c === 'a' ) {
state=2;
if (!Parser.stack_push(stack, 1, true)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
if (c === 'b' ) {
state=2;
if (!Parser.stack_push(stack, 1, true)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
{ throw new Error(`No way to continue on letter '${c}'`); }
break;
case 2:
if (c === 'b' ) {
state=8;
path.push("S[");
if (!Parser.stack_push(stack, 0, true)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
if (c === '(' ) {
state=8;
path.push("S[");
if (!Parser.stack_push(stack, 0, true)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
if (c === 'a' ) {
state=8;
path.push("S[");
if (!Parser.stack_push(stack, 0, true)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
{ throw new Error(`No way to continue on letter '${c}'`); }
break;
case 3:
if (c === 'c'  && stack_top === 5) {
state=4;
path.push("S]");
continue EDGES;
} else 
if (c === ')'  && stack_top === 4) {
state=4;
path.push("S]");
continue EDGES;
} else 
if (c === 'c'  && stack_top === 1) {
state=4;
path.push("S]");
continue EDGES;
} else 
if (c === ')'  && stack_top === 1) {
state=4;
path.push("S]");
continue EDGES;
} else 
if (c === '+' ) {
state=1;
path.push("+");
continue LETTERS;
} else 
{ throw new Error(`No way to continue on letter '${c}'`); }
break;
case 4:
if (c === 'c'  && stack_top === 1) {
state=0;
if (!Parser.stack_push(stack, 1, false)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
if (c === ')'  && stack_top === 1) {
state=0;
if (!Parser.stack_push(stack, 1, false)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
if (c === ')'  && stack_top === 4) {
state=14;
if (!Parser.stack_push(stack, 4, false)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
if (c === 'c'  && stack_top === 5) {
state=16;
path.push("c");
if (!Parser.stack_push(stack, 5, false)) { throw new Error("Unbalanced brackets"); }
continue LETTERS;
} else 
{ throw new Error(`No way to continue on letter '${c}'`); }
break;
case 5:
if (c === ')'  && stack_top === 3) {
state=9;
path.push("T]");
continue EDGES;
} else 
if (c === '+'  && stack_top === 3) {
state=9;
path.push("T]");
continue EDGES;
} else 
if (c === '+'  && stack_top === 0) {
state=9;
path.push("T]");
continue EDGES;
} else 
if (c === 'c'  && stack_top === 3) {
state=9;
path.push("T]");
continue EDGES;
} else 
if (c === ')'  && stack_top === 0) {
state=9;
path.push("T]");
continue EDGES;
} else 
if (c === 'c'  && stack_top === 0) {
state=9;
path.push("T]");
continue EDGES;
} else 
{ throw new Error(`No way to continue on letter '${c}'`); }
break;
case 6:
if (c === 'a' ) {
state=8;
if (!Parser.stack_push(stack, 3, true)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
if (c === 'b' ) {
state=8;
if (!Parser.stack_push(stack, 3, true)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
if (c === '(' ) {
state=8;
if (!Parser.stack_push(stack, 3, true)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
{ throw new Error(`No way to continue on letter '${c}'`); }
break;
case 7:
if (c === 'c'  && stack_top === 3) {
state=9;
path.push("T]");
continue EDGES;
} else 
if (c === '+'  && stack_top === 3) {
state=9;
path.push("T]");
continue EDGES;
} else 
if (c === 'c'  && stack_top === 0) {
state=9;
path.push("T]");
continue EDGES;
} else 
if (c === ')'  && stack_top === 0) {
state=9;
path.push("T]");
continue EDGES;
} else 
if (c === ')'  && stack_top === 3) {
state=9;
path.push("T]");
continue EDGES;
} else 
if (c === '+'  && stack_top === 0) {
state=9;
path.push("T]");
continue EDGES;
} else 
if (c === '*' ) {
state=6;
path.push("*");
continue LETTERS;
} else 
{ throw new Error(`No way to continue on letter '${c}'`); }
break;
case 8:
if (c === 'a' ) {
state=13;
path.push("T[");
if (!Parser.stack_push(stack, 2, true)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
if (c === 'b' ) {
state=13;
path.push("T[");
if (!Parser.stack_push(stack, 2, true)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
if (c === '(' ) {
state=13;
path.push("T[");
if (!Parser.stack_push(stack, 2, true)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
{ throw new Error(`No way to continue on letter '${c}'`); }
break;
case 9:
if (c === '+'  && stack_top === 0) {
state=3;
if (!Parser.stack_push(stack, 0, false)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
if (c === 'c'  && stack_top === 0) {
state=3;
if (!Parser.stack_push(stack, 0, false)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
if (c === ')'  && stack_top === 0) {
state=3;
if (!Parser.stack_push(stack, 0, false)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
if (c === '+'  && stack_top === 3) {
state=5;
if (!Parser.stack_push(stack, 3, false)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
if (c === 'c'  && stack_top === 3) {
state=5;
if (!Parser.stack_push(stack, 3, false)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
if (c === ')'  && stack_top === 3) {
state=5;
if (!Parser.stack_push(stack, 3, false)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
{ throw new Error(`No way to continue on letter '${c}'`); }
break;
case 10:
if (c === 'c'  && stack_top === 2) {
state=12;
path.push("F]");
continue EDGES;
} else 
if (c === '+'  && stack_top === 2) {
state=12;
path.push("F]");
continue EDGES;
} else 
if (c === ')'  && stack_top === 2) {
state=12;
path.push("F]");
continue EDGES;
} else 
if (c === '*'  && stack_top === 2) {
state=12;
path.push("F]");
continue EDGES;
} else 
{ throw new Error(`No way to continue on letter '${c}'`); }
break;
case 11:
if (c === 'b' ) {
state=2;
if (!Parser.stack_push(stack, 4, true)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
if (c === 'a' ) {
state=2;
if (!Parser.stack_push(stack, 4, true)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
if (c === '(' ) {
state=2;
if (!Parser.stack_push(stack, 4, true)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
{ throw new Error(`No way to continue on letter '${c}'`); }
break;
case 12:
if (c === '*'  && stack_top === 2) {
state=7;
if (!Parser.stack_push(stack, 2, false)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
if (c === ')'  && stack_top === 2) {
state=7;
if (!Parser.stack_push(stack, 2, false)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
if (c === 'c'  && stack_top === 2) {
state=7;
if (!Parser.stack_push(stack, 2, false)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
if (c === '+'  && stack_top === 2) {
state=7;
if (!Parser.stack_push(stack, 2, false)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
{ throw new Error(`No way to continue on letter '${c}'`); }
break;
case 13:
if (c === '(' ) {
state=11;
path.push("F[");
path.push("(");
continue LETTERS;
} else 
if (c === 'b' ) {
state=10;
path.push("F[");
path.push("b");
continue LETTERS;
} else 
if (c === 'a' ) {
state=10;
path.push("F[");
path.push("a");
continue LETTERS;
} else 
{ throw new Error(`No way to continue on letter '${c}'`); }
break;
case 14:
if (c === ')' ) {
state=10;
path.push(")");
continue LETTERS;
} else 
{ throw new Error(`No way to continue on letter '${c}'`); }
break;
case 15:
if (c === 'a' ) {
state=2;
if (!Parser.stack_push(stack, 5, true)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
if (c === 'b' ) {
state=2;
if (!Parser.stack_push(stack, 5, true)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
if (c === '(' ) {
state=2;
if (!Parser.stack_push(stack, 5, true)) { throw new Error("Unbalanced brackets"); }
continue EDGES;
} else 
{ throw new Error(`No way to continue on letter '${c}'`); }
break;
case 16:
{ throw new Error(`No way to continue on letter '${c}'`); }
break;

        default: throw new Error(`Unreachable state: ${state}`); } 
        } 
        } 
        
        if (stack.length !== 0) {
            throw new Error(`Unbalanced brackets`);    
        }
        const end_states = [ 16, ];
        var is_end_state = false;
        for (let i=0;i<end_states.length; i++) {
            if (state === end_states[i]) { is_end_state = true; break; } 
        }
        if (!is_end_state) { throw new Error("Did not reach an end state"); }
        
        path.pop();
        return path  
        } 
        }
